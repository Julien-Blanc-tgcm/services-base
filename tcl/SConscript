#*****************************************************************************
# Copyright (c) 2013, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#*****************************************************************************

services_common_root_default = '../../services_common/tcl'
about_root_default           = '../../about/tcl'
serversample_root_default    = '../../../applications/sample_apps/tcl/ServerSample'

import os
Import('config_env')

vars = Variables()
vars.Add('SERVICES_COMMON_ROOT', 'Root directory of Services Common', services_common_root_default)
vars.Add('ABOUT_ROOT', 'Root directory of About service', about_root_default)
vars.Add('SERVERSAMPLE_ROOT', 'Root directory of services server sample', serversample_root_default)

vars.Update(config_env)

Help(vars.GenerateHelpText(config_env))

if not os.path.isfile(config_env['SERVERSAMPLE_ROOT'] + '/SConscript'):
    print "SConscript in 'SERVERSAMPLE_ROOT=" + config_env['SERVERSAMPLE_ROOT'] + "' not found; aborting.\n"
    exit(1)

# a flag to tell services server sample not to build its executable, but rather
# to return to us build parameters and info for us to build here.
config_env['INDIV_BUILD'] = 1
# convert locations to absolute, to be passed on to sample apps in subdirectories
config_env['SERVERSAMPLE_ROOT_FROM_COMPONENT'] = str(config_env.Dir('$SERVERSAMPLE_ROOT'))
# abs. path to Services Common is needed by server sample scons
config_env['SERVICES_COMMON_ROOT_FROM_COMPONENT'] = str(config_env.Dir('$SERVICES_COMMON_ROOT'))
# abs. path to About service is needed by server sample scons
config_env['ABOUT_ROOT_FROM_COMPONENT']        = str(config_env.Dir('$ABOUT_ROOT'))

returnValue = []
config_app = config_env.SConscript('src/SConscript')
config_env.Install("build", config_app)
returnValue += config_app

Return('returnValue')