#*****************************************************************************
# Copyright (c) 2013, AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#*****************************************************************************

import os
Import('config_env')

target_name = 'AboutConfigServiceSample'
source_files = [
                Glob('*.c'),

]

config_env['CONFIG_DEFINE_STRING'] = 'CONFIG_SERVICE'
config_env['INCLUDE_DIRS'] =  [
                     Dir('../inc'),
                 ]

config_env.Append(CPPPATH    = config_env['INCLUDE_DIRS'])

config_env.Append(CPPDEFINES = '$CONFIG_DEFINE_STRING')
                 
Export('config_env') # needed when we are called directly by serversample

local_objs = config_env.Object(source_files)

# if we are called as part of services server sample, then return now:
if not config_env.has_key('INDIV_BUILD'):
	Return('local_objs')

# we are called as part of Config build, which needs 
# server sample, Services Common and About components

config_env['SERSAMP_VARIANT_DIR'] = config_env['CONFIG_DEFINE_STRING'].lower()
serversample_objs = config_env.SConscript('$SERVERSAMPLE_ROOT_FROM_COMPONENT/SConscript', {'env': config_env})

prog = config_env.Program(target = target_name, 
			source = [
    			local_objs,
                serversample_objs,
                config_env['aj_obj'],
			])
Return('prog')
